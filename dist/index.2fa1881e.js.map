{"mappings":"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","sources":["src/js/data.js","src/js/Views/constructorsView.js","src/js/config.js","src/js/model.js","src/js/Views/standingsView.js","src/js/Views/circuitViewProgressBar.js","src/js/Views/circuitView.js","src/js/Views/circuitWindowView.js","src/js/controller.js"],"sourcesContent":["export const moreDataCircuits = [\r\n  {\r\n    circuitId: 'bahrain',\r\n    firstGP: 2004,\r\n    circuitLenght: 5.412,\r\n  },\r\n  {\r\n    circuitId: 'yas_marina',\r\n    firstGP: 2009,\r\n    circuitLenght: 5.554,\r\n  },\r\n  {\r\n    circuitId: 'imola',\r\n    firstGP: 1980,\r\n    circuitLenght: 4.909,\r\n  },\r\n  {\r\n    circuitId: 'red_bull_ring',\r\n    firstGP: 1970,\r\n    circuitLenght: 4.326,\r\n  },\r\n  {\r\n    circuitId: 'portimao',\r\n    firstGP: 2020,\r\n    circuitLenght: 4.653,\r\n  },\r\n  {\r\n    circuitId: 'catalunya',\r\n    firstGP: 1991,\r\n    circuitLenght: 4.675,\r\n  },\r\n  {\r\n    circuitId: 'monaco',\r\n    firstGP: 1950,\r\n    circuitLenght: 3.337,\r\n  },\r\n  {\r\n    circuitId: 'BAK',\r\n    firstGP: 2016,\r\n    circuitLenght: 6.003,\r\n  },\r\n  {\r\n    circuitId: 'ricard',\r\n    firstGP: 1971,\r\n    circuitLenght: 5.842,\r\n  },\r\n  {\r\n    circuitId: 'silverstone',\r\n    firstGP: 1950,\r\n    circuitLenght: 5.891,\r\n  },\r\n  {\r\n    circuitId: 'monza',\r\n    firstGP: 1950,\r\n    circuitLenght: 5.793,\r\n  },\r\n  {\r\n    circuitId: 'zandvoort',\r\n    firstGP: 1952,\r\n    circuitLenght: 4.259,\r\n  },\r\n  {\r\n    circuitId: 'sochi',\r\n    firstGP: 2014,\r\n    circuitLenght: 5.848,\r\n  },\r\n  {\r\n    circuitId: 'istanbul',\r\n    firstGP: 2005,\r\n    circuitLenght: 5.338,\r\n  },\r\n  {\r\n    circuitId: 'americas',\r\n    firstGP: 2012,\r\n    circuitLenght: 5.513,\r\n  },\r\n  {\r\n    circuitId: 'rodriguez',\r\n    firstGP: 1963,\r\n    circuitLenght: 4.304,\r\n  },\r\n  {\r\n    circuitId: 'interlagos',\r\n    firstGP: 1973,\r\n    circuitLenght: 4.309,\r\n  },\r\n  {\r\n    circuitId: 'losail',\r\n    firstGP: 2021,\r\n    circuitLenght: 5.38,\r\n  },\r\n  {\r\n    circuitId: 'jeddah',\r\n    firstGP: 2021,\r\n    circuitLenght: 6.174,\r\n  },\r\n  {\r\n    circuitId: 'bahrain',\r\n    firstGP: 2004,\r\n    circuitLenght: 5.412,\r\n  },\r\n  {\r\n    circuitId: 'spa',\r\n    firstGP: 1950,\r\n    circuitLenght: 7.004,\r\n  },\r\n  {\r\n    circuitId: 'hungaroring',\r\n    firstGP: 1986,\r\n    circuitLenght: 4.381,\r\n  },\r\n];\r\nexport const moreDataConstructors = [\r\n  {\r\n    constructorsId: 'alfa',\r\n    base: 'Hinwil-Switzerland',\r\n    teamChief: 'Frédéric Vasseur',\r\n    chassis: 'C41',\r\n    powerUnit: 'Ferrari',\r\n  },\r\n  {\r\n    constructorsId: 'alphatauri',\r\n    base: 'Faenza, Italy',\r\n    teamChief: 'Franz Tost',\r\n    chassis: 'AT02',\r\n    powerUnit: 'Honda',\r\n  },\r\n  {\r\n    constructorsId: 'alpine',\r\n    base: 'Enstone-United Kingdom',\r\n    teamChief: 'Davide Brivio',\r\n    chassis: 'A521',\r\n    powerUnit: 'Renault',\r\n  },\r\n  {\r\n    constructorsId: 'aston_martin',\r\n    base: 'Silverstone-United Kingdom',\r\n    teamChief: 'Otmar Szafnauer',\r\n    chassis: 'AMR21',\r\n    powerUnit: 'Mercedes',\r\n  },\r\n  {\r\n    constructorsId: 'ferrari',\r\n    base: 'Maranello-Italy',\r\n    teamChief: 'Mattia Binotto',\r\n    chassis: 'SF21',\r\n    powerUnit: 'Ferrari',\r\n  },\r\n  {\r\n    constructorsId: 'haas',\r\n    base: 'Kannapolis-United States',\r\n    teamChief: 'Guenther Steiner',\r\n    chassis: 'VF-21',\r\n    powerUnit: 'Ferrari',\r\n  },\r\n  {\r\n    constructorsId: 'mclaren',\r\n    base: 'Woking-United Kingdom',\r\n    teamChief: 'Andreas Seidlr',\r\n    chassis: 'MCL35M',\r\n    powerUnit: 'Mercedes',\r\n  },\r\n  {\r\n    constructorsId: 'mercedes',\r\n    base: 'Brackley-United Kingdom',\r\n    teamChief: 'Toto Wolff',\r\n    chassis: 'W12',\r\n    powerUnit: 'Mercedes',\r\n  },\r\n  {\r\n    constructorsId: 'red_bull',\r\n    base: 'Milton Keynes- United Kingdom',\r\n    teamChief: 'Christian Horner',\r\n    powerUnit: 'Honda',\r\n    chassis: 'RB16B',\r\n  },\r\n  {\r\n    constructorsId: 'williams',\r\n    base: 'Grove-United Kingdom',\r\n    teamChief: 'Jost Capito',\r\n    chassis: 'FW43B',\r\n    powerUnit: 'Mercedes',\r\n  },\r\n];\r\n","class ConstructorView {\r\n  allSlides = [];\r\n  allElements = [];\r\n  parentElement = document.querySelector('.placeholder');\r\n  curSlide = 0;\r\n  elements;\r\n  addHandlerConstructors(handler) {\r\n    document\r\n      .getElementById('#section--2--btn')\r\n      .addEventListener('click', function () {\r\n        console.log('Hello section 2');\r\n        document.querySelector('.section__section--2').style.display = 'block';\r\n        document.querySelector('.section__section--2').scrollIntoView();\r\n        handler();\r\n      });\r\n  }\r\n\r\n  render(data) {\r\n    const newSlide = `<div class= \"slide__constructors\" border-color: '--color-${data.id}>\r\n        <div class= \"constructor__name\">${data.name}</div>\r\n             <img\r\n             src= \"/images/teams-logo/${data.id}-logo.png\"\r\n             class= \"constructor__team--logo\"\r\n             />\r\n             <div class= \"constructor__details\">\r\n               <table class= \"constructor__detail\">\r\n                 <tr></tr>\r\n                 <tr>\r\n                   <th class= \"constructor__details--cap\">Team nationality</th>\r\n                   <th class= 'constructor__details--input' id=\"input--nationality\">${data.nationality}</th>\r\n                 </tr>\r\n                 <tr>\r\n                   <th class= \"constructor__details--cap\">Base</th>\r\n                   <th class= 'constructor__details--input'id=\"input--base\">${data.base}</th>\r\n                 </tr>\r\n                 <tr>\r\n                   <th class= \"constructor__details--cap\">Team Chief</th>\r\n                   <th class= 'constructor__details--input'id=\"input--chief\">${data.teamChief}</th>\r\n                 </tr>\r\n                 <tr>\r\n                   <th class= \"constructor__details--cap\">Chassis</th>\r\n                   <th class= 'constructor__details--input'id=\"input--chassis\">${data.chassis}</th>\r\n                 </tr>\r\n       <tr>\r\n                   <th class= \"constructor__details--cap\">Power-unit</th>\r\n                   <th class= 'constructor__details--input'id=\"input--powerunit\">${data.powerUnit}</th>\r\n                 </tr>\r\n               </table>\r\n             </div>\r\n             <img\r\n             src= \"/images/team-car/${data.id}.png\"\r\n             class=\"constructor__car\"\r\n             alt= \"F1 car\"\r\n           />\r\n           </div>\r\n           </div>\r\n <style>\r\n .slide__constructors{\r\n   border-color: var(--color-${data.id})\r\n }\r\n .constructor__name{\r\n   color: var(--color-${data.id})\r\n }\r\n .constructor__details--input{\r\n  color: var(--color-${data.id})\r\n}\r\n\r\n.slider__btn{\r\n  color: var(--color-${data.id})\r\n}\r\n </style>`;\r\n\r\n    this.allSlides.push(newSlide);\r\n    this.allElements.push(this._createSlideElement(newSlide));\r\n    this.parentElement.append(this.allElements[this.curSlide]);\r\n    return this.allElements;\r\n  }\r\n\r\n  _createSlideElement(slide) {\r\n    const element = document.createElement(`div`);\r\n    element.innerHTML = slide;\r\n    return element;\r\n  }\r\n}\r\n\r\nexport default new ConstructorView();\r\n","export const DRIVERS_URL = 'http://ergast.com/api/f1/2021/drivers.json';\r\nexport const STANDINGS_URL =\r\n  'http://ergast.com/api/f1/current/driverStandings.json';\r\nexport const CIRCUITS_URL = 'http://ergast.com/api/f1/2021/circuits.json';\r\nexport const RESULTS_URL =\r\n  'https://ergast.com/api/f1/2021/results.json?limit=1000';\r\nexport const CONSTRUCTORS_URL =\r\n  'http://ergast.com/api/f1/2021/constructors.json';\r\nexport const RES_PER_PAGE = 6;\r\n","import constructorsView from './Views/constructorsView';\r\nimport {\r\n  DRIVERS_URL,\r\n  STANDINGS_URL,\r\n  CIRCUITS_URL,\r\n  CONSTRUCTORS_URL,\r\n  RESULTS_URL,\r\n  RES_PER_PAGE,\r\n} from './config';\r\nimport { moreDataCircuits, moreDataConstructors } from './data';\r\nexport const state = {\r\n  driversData: {\r\n    drivers: [],\r\n    standings: [],\r\n  },\r\n  constructorData: {},\r\n  constructorsSlides: [],\r\n  circuitData: { data: [], resultsPerPage: RES_PER_PAGE },\r\n};\r\nexport const getDrivers = async function () {\r\n  const driversFetch = await fetch(DRIVERS_URL);\r\n  const standingsFetch = await fetch(STANDINGS_URL);\r\n\r\n  Promise.all([driversFetch, standingsFetch])\r\n    .then(responses => {\r\n      return Promise.all(responses.map(response => response.json()));\r\n    })\r\n    .then(datas => {\r\n      state.driversData.standings =\r\n        datas[1].MRData.StandingsTable.StandingsLists[0].DriverStandings;\r\n      state.driversData.drivers = datas[0].MRData.DriverTable.Drivers;\r\n    });\r\n};\r\ngetDrivers();\r\nexport const getStandingsData = async function (data) {\r\n  console.log(data);\r\n  const standingData = await data.standings.map(standing => {\r\n    const { name: teamName } = standing.Constructors[0];\r\n    const { points, position, wins } = standing;\r\n    const { driverId, permanentNumber, nationality, givenName, familyName } =\r\n      standing.Driver;\r\n    return {\r\n      points: points,\r\n      position: position,\r\n      wins: wins,\r\n      id: driverId,\r\n      number: permanentNumber,\r\n      nation: nationality,\r\n      family: familyName,\r\n      name: givenName,\r\n      team: teamName,\r\n    };\r\n  });\r\n  return standingData;\r\n};\r\n\r\nexport const getConstructors = async function () {\r\n  const constructorFetch = await fetch(CONSTRUCTORS_URL);\r\n  const response = await constructorFetch.json();\r\n  state.constructorData = response.MRData.ConstructorTable.Constructors;\r\n};\r\n\r\nexport const getConstructorsData = async function (data) {\r\n  try {\r\n    console.log(data);\r\n    const constructorData = await data.map(constructor => {\r\n      const { constructorId, name, nationality } = constructor;\r\n      const index = moreDataConstructors.find(\r\n        element => element.constructorsId === constructorId\r\n      );\r\n      const { base, teamChief, chassis, powerUnit } = index;\r\n      return {\r\n        id: constructorId,\r\n        name: name,\r\n        nationality: nationality,\r\n        base: base,\r\n        teamChief: teamChief,\r\n        chassis: chassis,\r\n        powerUnit: powerUnit,\r\n      };\r\n    });\r\n    return constructorData;\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n};\r\n\r\nexport const getCircuits = async function () {\r\n  const circuitFetch = await fetch(CIRCUITS_URL);\r\n  const response = await circuitFetch.json();\r\n  const circuits = response.MRData.CircuitTable.Circuits;\r\n  console.log(circuits);\r\n  state.circuitData.page = 1;\r\n\r\n  return circuits;\r\n};\r\n\r\nexport const getCircuitPage = function (page = state.circuitData.page) {\r\n  const totalPages = Math.ceil(\r\n    state.circuitData.data.length / state.circuitData.resultsPerPage\r\n  );\r\n  state.circuitData.numberOfPages = totalPages;\r\n  state.circuitData.page = page;\r\n  const start = (page - 1) * state.circuitData.resultsPerPage;\r\n  const end = page * state.circuitData.resultsPerPage;\r\n  return state.circuitData.data.slice(start, end);\r\n};\r\n\r\n// export const getNewWindowCircuitData = function () {\r\n//   state.circuitData.push(moreDataCircuits);\r\n// };\r\n// getNewWindowCircuitData();\r\n","class Standings {\r\n  _parentElement = document.querySelector('.table__body');\r\n  _driverParentElement = document.querySelector('.driver__leader');\r\n  addHandlerStandings(handler) {\r\n    document\r\n      .getElementById('#section--1--btn')\r\n      .addEventListener('click', function () {\r\n        console.log('Hello');\r\n        handler();\r\n        document.querySelector('.section__section--1').style.display = 'block';\r\n        document.querySelector('.section__section--1').scrollIntoView();\r\n      });\r\n  }\r\n  clear() {\r\n    this._parentElement.remove();\r\n    this._parentElement = document.createElement('tbody');\r\n    document.querySelector('.tbl__drivers').appendChild(this._parentElement);\r\n  }\r\n  renderDriverPicture(data) {\r\n    if (data.position === 1)\r\n      this._driverParentElement.src = `/images/drivers/${data.id}.png`;\r\n  }\r\n  render(data) {\r\n    this.renderDriverPicture(data);\r\n    console.log(data);\r\n    // if (!document.querySelector('.table__body')) {\r\n    const newRow = document.createElement('tr');\r\n    const text = [\r\n      data.number,\r\n      `${data.name} ${data.family}`,\r\n      data.nation,\r\n      data.team,\r\n      data.points,\r\n      data.wins,\r\n    ];\r\n    text.map(text => {\r\n      const cell = document.createElement('td');\r\n      cell.append(text);\r\n      newRow.appendChild(cell);\r\n    });\r\n    this._parentElement.appendChild(newRow);\r\n\r\n    // }\r\n  }\r\n}\r\n\r\nexport default new Standings();\r\n","const progress = function (circuits, number, page) {\r\n  const html = `\r\n    \r\n    <div class=\"progress-bar-background\">\r\n      <div\r\n        class=\"progress-bar\"\r\n        />\r\n        </div>\r\n        </div>\r\n    <style>\r\n    .progress{\r\n    }\r\n    .progress-bar-background{\r\n    }\r\n        .progress-bar{\r\n          width: ${(80 / (circuits / number)) * page + '%'};\r\n          z-index: 1;\r\n        }`;\r\n  const barElement = document.createElement('div');\r\n  barElement.classList.add('progress');\r\n  barElement.innerHTML = html;\r\n  document.querySelector('.content-circuits').append(barElement);\r\n};\r\n\r\nexport default progress;\r\n","import progress from './circuitViewProgressBar';\r\nclass CircuitView {\r\n  _topLevelElement = document.querySelector('.section__3--results');\r\n  _parentElement = document.querySelector('.results--round');\r\n\r\n  addHandlerCircuits(handler) {\r\n    document\r\n      .getElementById('#section--3--btn')\r\n      .addEventListener('click', function () {\r\n        handler();\r\n        document.querySelector('.section__section--3').style.display = 'block';\r\n        document.querySelector('.section__section--3').scrollIntoView();\r\n      });\r\n  }\r\n  _clear() {\r\n    this._parentElement.remove();\r\n    this._parentElement = document.createElement('tr');\r\n    this._parentElement.classList.add('results--round');\r\n    this._topLevelElement.append(this._parentElement);\r\n  }\r\n  renderProgressBar(data) {\r\n    progress(\r\n      data.circuitData.data.length,\r\n      data.circuitData.resultsPerPage,\r\n      data.circuitData.page\r\n    );\r\n  }\r\n\r\n  renderNextCircuits(data) {\r\n    let maxPages = data.state.circuitData.numberOfPages;\r\n    this._clear();\r\n    if (data.state.circuitData.page === maxPages) {\r\n      data.state.circuitData.page = maxPages;\r\n    } else {\r\n      document.querySelector('.paginate.left').setAttribute('data-state', '');\r\n      data.state.circuitData.page++;\r\n      document\r\n        .querySelector('.paginate.right')\r\n        .setAttribute(\r\n          'data-state',\r\n          data.state.circuitData.page === maxPages ? 'disabled' : ''\r\n        );\r\n    }\r\n    document.querySelector('.paginate.left').setAttribute('data-state', '');\r\n    this.render(data.getCircuitPage(data.state.circuitData.page));\r\n    document.querySelector('.progress-bar').style.width =\r\n      (90 /\r\n        (data.state.circuitData.data.length /\r\n          data.state.circuitData.resultsPerPage)) *\r\n        data.state.circuitData.page +\r\n      '%';\r\n  }\r\n  renderPreviousCircuits(data) {\r\n    this._clear();\r\n    if (data.state.circuitData.page === 1) {\r\n      data.state.circuitData.page = data.state.circuitData.page;\r\n    } else {\r\n      document.querySelector('.paginate.right').setAttribute('data-state', '');\r\n      data.state.circuitData.page--;\r\n      document\r\n        .querySelector('.paginate.left')\r\n        .setAttribute(\r\n          'data-state',\r\n          data.state.circuitData.page === 1 ? 'disabled' : ''\r\n        );\r\n    }\r\n\r\n    this.render(data.getCircuitPage(data.state.circuitData.page));\r\n    document.querySelector('.progress-bar').style.width =\r\n      (90 /\r\n        (data.state.circuitData.data.length /\r\n          data.state.circuitData.resultsPerPage)) *\r\n        data.state.circuitData.page +\r\n      '%';\r\n  }\r\n  renderFirstArrow(data) {\r\n    document\r\n      .querySelector('.paginate.left')\r\n      .setAttribute(\r\n        'data-state',\r\n        data.state.circuitData.page === 1 ? 'disabled' : ''\r\n      );\r\n  }\r\n  render(data) {\r\n    console.log(data);\r\n\r\n    data.forEach(data => {\r\n      const newElement = `\r\n          <button  class = \"btn__circuit\" id = \"btn_circuit--${data.circuitId}\">\r\n          <div class= \"circuit__logo__div\">\r\n          <img\r\n           src= \"/images/country-logo/${data.circuitId}.png\"\r\n            class= \"circuit__country--logo\"\r\n          /> \r\n            </div>\r\n            <div class = \"circuit__name\">\r\n              <div></div>\r\n              <div>${data.circuitName}</div>\r\n            </div>\r\n          </div>\r\n          </button>\r\n          `;\r\n\r\n      const circuitCell = document.createElement('td');\r\n      circuitCell.classList.add('results--round--cell');\r\n      circuitCell.innerHTML = newElement;\r\n      this._parentElement.appendChild(circuitCell);\r\n    });\r\n  }\r\n}\r\nexport default new CircuitView();\r\n","class NewWindowView {\r\n  _parentElement = document.querySelector('.section--3--results');\r\n  render(data) {\r\n    console.log(data);\r\n    const opened = window.open('', '_self');\r\n    opened.document.writeln(`\r\n      <html>\r\n      <head>\r\n        <meta charset=\"UTF-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n        <link rel=\"stylesheet\" href=\"index.css\" />\r\n        <title>${data.circuitName}</title>\r\n      </head>\r\n      <body>\r\n      <section class = \"section--3--data\">\r\n\r\n      <div class=\"bg-image--1\"></div>\r\n      <div class = \"circuit-information\">\r\n        <div class = \"section__3--title--window\"> ${data.circuitName} GRAND PRIX</div>\r\n        <div class = \"section__3--container\">\r\n\r\n       <img\r\n          src = \"circuits/${data.circuitId}.png\"\r\n          class = \"circuit-track\"\r\n          height = 400px\r\n          alt = \"Circuit - ${data.circuitName}\"\r\n        />\r\n        <table class = \"section--3--window-table\">\r\n        </table>\r\n        </div>\r\n        </div>\r\n        <button onClick = \"goBack()\">Go Back</button>\r\n      </section>\r\n        <section class = \"section--3--results\">\r\n\r\n        </section>\r\n\r\n      </body>\r\n      </html>`);\r\n\r\n    // extractResultsPromise(raceResults, placeholder);\r\n  }\r\n}\r\nexport default new NewWindowView();\r\n// const createCircuitSection = function (circuit) {\r\n//   const moreData = moreDataCircuits.find(\r\n//     element => element.circuitId === circuit.circuitId\r\n//   );\r\n//   const { circuitLenght, firstGP } = moreData;\r\n//   const { country, locality } = circuit.Location;\r\n//   const tableCaps = [\r\n//     'Circuit Name',\r\n//     'Country',\r\n//     'City',\r\n//     'Circuit Lenght',\r\n//     'First GP',\r\n//   ];\r\n//   const dataCap = [\r\n//     circuit.circuitName,\r\n//     country,\r\n//     locality,\r\n//     circuitLenght,\r\n//     firstGP,\r\n//   ];\r\n//   appendCircuits(tableCaps, dataCap);\r\n// };\r\n","// f1 api https://documenter.getpostman.com/view/11586746/SztEa7bL#0ea5c425-c116-47e5-a83f-64f0a39a10db\r\nimport { moreDataConstructors, moreDataCircuits } from './data';\r\nimport * as model from './model.js';\r\nimport constructorsView from './Views/constructorsView';\r\nimport standingsView from './Views/standingsView';\r\nimport circuitView from './Views/circuitView';\r\nimport progress from './Views/circuitViewProgressBar';\r\nimport NewWindowView from './Views/circuitWindowView';\r\nconst btnSlideRight = document.querySelector('.slider__btn--right');\r\nconst btnSlideLeft = document.querySelector('.slider__btn--left');\r\nconst arrowLeft = document.querySelector('.paginate.left ');\r\nconst arrowRight = document.querySelector('.paginate.right');\r\nlet curSlide = 0;\r\nlet maxSlides;\r\nlet sortedColumn = null;\r\nlet allDriversPodiumData = [];\r\n\r\n//// SECTION 2 - STANDINGS\r\n\r\n//Control Drivers and Standings Data\r\n\r\nconst controlStandings = async function (data = model.state.driversData) {\r\n  const dataStandings = await model.getStandingsData(data);\r\n  standingsView.clear();\r\n  dataStandings.sort((a, b) => b[0] - a[0]);\r\n  // console.log(dataStandings);\r\n  dataStandings.forEach(data => standingsView.render(data));\r\n};\r\n\r\n//Control Constructors Data\r\nconst controlConstructors = async function (\r\n  data = model.state.constructorData\r\n) {\r\n  const dataConstructors = await model.getConstructorsData(data);\r\n  console.log(dataConstructors);\r\n\r\n  dataConstructors.forEach(data => constructorsView.render(data));\r\n  model.state.constructorsSlides = constructorsView.allElements;\r\n};\r\n\r\n//Control SlideDisplay\r\nconst controlNextSlide = function () {\r\n  maxSlides = model.state.constructorsSlides.length - 1;\r\n  constructorsView.parentElement.removeChild(\r\n    model.state.constructorsSlides[curSlide]\r\n  );\r\n  if (curSlide === maxSlides) {\r\n    curSlide = 0;\r\n  } else curSlide++;\r\n  constructorsView.parentElement.append(\r\n    model.state.constructorsSlides[curSlide]\r\n  );\r\n};\r\nconst controlPreviousSlide = function () {\r\n  maxSlides = model.state.constructorsSlides.length - 1;\r\n  constructorsView.parentElement.removeChild(\r\n    model.state.constructorsSlides[curSlide]\r\n  );\r\n  if (curSlide === 0) {\r\n    curSlide = maxSlides;\r\n  } else curSlide--;\r\n  constructorsView.parentElement.append(\r\n    model.state.constructorsSlides[curSlide]\r\n  );\r\n};\r\n\r\n//Control Circuits Data + Display Circuits\r\n\r\nconst controlCircuits = async function () {\r\n  model.state.circuitData.data = await model.getCircuits();\r\n  circuitView.render(model.getCircuitPage());\r\n  console.log(model.state);\r\n  circuitView.renderProgressBar(model.state);\r\n  circuitView.renderFirstArrow(model);\r\n  controlCircuitAddEvents();\r\n};\r\nconst controlCircuitAddEvents = function () {\r\n  arrowRight.addEventListener('click', function () {\r\n    circuitView.renderNextCircuits(model);\r\n  });\r\n  arrowLeft.addEventListener('click', function () {\r\n    circuitView.renderPreviousCircuits(model);\r\n  });\r\n};\r\n\r\n// const controlCircuitWindow = function () {\r\n//   NewWindowView.render(model.state.circuitData[1]);\r\n//   console.log(model.state);\r\n//   const moreCircuitData = model.moreDataCircuits.find(\r\n//     element => element.circuitId === model.state.circuitData.circuitId\r\n//   );\r\n//   console.log(moreCircuitData);\r\n// };\r\n// document\r\n//   .querySelector('.section__3--title')\r\n//   .addEventListener('click', function () {\r\n//     controlCircuitWindow();\r\n//   });\r\nconst init = function () {\r\n  window.onload = model.getConstructors();\r\n  standingsView.addHandlerStandings(controlStandings);\r\n  constructorsView.addHandlerConstructors(controlConstructors);\r\n  btnSlideRight.addEventListener('click', controlNextSlide);\r\n  btnSlideLeft.addEventListener('click', controlPreviousSlide);\r\n  circuitView.addHandlerCircuits(controlCircuits);\r\n};\r\ninit();\r\n\r\n// //// SECTION 3 - CIRCUITS AND  RESULTS\r\n\r\n// //Fetch CIRCUITS DATA\r\n// //Fetch RESULTS FOR ALL RACES IN CURRENT YEAR\r\n\r\n// const getResults = async function () {\r\n//   const response = await fetch(RESULTS_URL);\r\n//   const dataResult = await response.json();\r\n//   const results = dataResult.MRData.RaceTable;\r\n//   return results;\r\n// };\r\n\r\n// //POP NEW WINDOW WITH RESULTS AND INFORAMTIONS ABOUT SPECIFIC CIRCUIT\r\n\r\n// const displayCircuits = function (parm) {\r\n//   // console.log(parm);\r\n//   setTimeout(() => {\r\n//     setRaceResults(parm);\r\n//   }, 500);\r\n// };\r\n\r\n// //SETTING RACE RESULTS\r\n\r\n// const getResultsData = function (circuit) {\r\n//   const results = getResults();\r\n//   const currentRound = results.then(data => {\r\n//     const allRaces = data.Races;\r\n//     const element = allRaces.find(\r\n//       element => element.Circuit.circuitId === circuit.circuitId\r\n//     );\r\n//     // console.log(element);\r\n//     return element;\r\n//   });\r\n//   const thisR = currentRound;\r\n//   return thisR;\r\n// };\r\n\r\n// //DISPLAY RESULTS\r\n\r\n// const displayResults = function (circuit) {\r\n//   const data = getResultsData(circuit);\r\n//   return data;\r\n// };\r\n\r\n// //IMPLEMENT RACE RESULTS IN THE NEW PAGE\r\n\r\n// const setRaceResults = function (circuit) {\r\n//   let raceResults = [];\r\n//   const thisRaceData = displayResults(circuit);\r\n//   thisRaceData.then(data => {\r\n//     raceResults = data.Results;\r\n//     // console.log(raceResults);\r\n//     if (raceResults) setNewPage(circuit, raceResults);\r\n//     else setNewPage(circuit);\r\n//     createCircuitSection(circuit);\r\n//   });\r\n// };\r\n\r\n// const section3 = document.querySelector('.section__3--title');\r\n\r\n// //PREPARE THE NEW PAGE WITH CIRCUTI AND RACE DATA\r\n\r\n// const setNewPage = function (circuit, raceResults) {\r\n//   createNewWindow(circuit, raceResults);\r\n//   document.querySelector('.section--3--data').scrollIntoView();\r\n// };\r\n\r\n// //CREATE HTML TO IMPLEMENT IN THE NEW PAGE\r\n\r\n// const createNewWindow = function (circuit, raceResults) {\r\n//   const opened = window.open('', '_self');\r\n//   opened.document.writeln(`\r\n//   <html>\r\n//   <head>\r\n//     <meta charset=\"UTF-8\" />\r\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n//     <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\r\n//     <link rel=\"stylesheet\" href=\"index.css\" />\r\n//     <title>${circuit.circuitName}</title>\r\n//   </head>\r\n//   <body>\r\n//   <section class = \"section--3--data\">\r\n\r\n//   <div class=\"bg-image--1\"></div>\r\n//   <div class = \"circuit-information\">\r\n//     <div class = \"section__3--title--window\"> ${circuit.circuitName} GRAND PRIX</div>\r\n//     <div class = \"section__3--container\">\r\n\r\n//    <img\r\n//       src = \"circuits/${circuit.circuitId}.png\"\r\n//       class = \"circuit-track\"\r\n//       height = 400px\r\n//       alt = \"Circuit - ${circuit.circuitName}\"\r\n//     />\r\n//     <table class = \"section--3--window-table\">\r\n//     </table>\r\n//     </div>\r\n//     </div>\r\n//     <button onClick = \"goBack()\">Go Back</button>\r\n//   </section>\r\n//     <section class = \"section--3--results\">\r\n\r\n//     </section>\r\n\r\n//   </body>\r\n//   </html>`);\r\n//   const placeholder = document.querySelector('.section--3--results');\r\n//   extractResultsPromise(raceResults, placeholder);\r\n// };\r\n\r\n// //SSETTING DATA FOR DE CIRCUIT SECTION\r\n\r\n// const createCircuitSection = function (circuit) {\r\n//   const moreData = moreDataCircuits.find(\r\n//     element => element.circuitId === circuit.circuitId\r\n//   );\r\n//   const { circuitLenght, firstGP } = moreData;\r\n//   const { country, locality } = circuit.Location;\r\n//   const tableCaps = [\r\n//     'Circuit Name',\r\n//     'Country',\r\n//     'City',\r\n//     'Circuit Lenght',\r\n//     'First GP',\r\n//   ];\r\n//   const dataCap = [\r\n//     circuit.circuitName,\r\n//     country,\r\n//     locality,\r\n//     circuitLenght,\r\n//     firstGP,\r\n//   ];\r\n//   appendCircuits(tableCaps, dataCap);\r\n// };\r\n\r\n// //Build the popup for each Driver in Top\r\n// const extractResultsPromise = function (raceResults, placeholder) {\r\n//   raceResults.splice(3);\r\n//   raceResults.forEach(result => {\r\n//     const { constructorId } = result.Constructor;\r\n//     const { givenName, familyName, permanentNumber, driverId } = result.Driver;\r\n//     const { grid, laps, points, position } = result;\r\n//     const { time } = result.Time;\r\n//     const podiumPlace =\r\n//       position == 1 ? 'WINNER' : position == 2 ? 'SECOND' : 'THIRD';\r\n//     const finishPlace = document.createElement('div');\r\n//     finishPlace.innerHTML = podiumPlace;\r\n//     finishPlace.classList.add('finish-place');\r\n//     const place = document.createElement('div');\r\n//     place.appendChild(finishPlace);\r\n//     place.classList.add('place');\r\n//     place.setAttribute('id', `place-${position}`);\r\n//     place.style.borderColor = `var(--color-${constructorId})`;\r\n//     const image = document.createElement('img');\r\n//     image.src = `images/${driverId}.png`;\r\n//     image.classList.add('driver-image-result');\r\n//     const driverInfo = document.createElement('div');\r\n//     driverInfo.innerHTML = `${givenName} ${familyName} <br> ${permanentNumber}`;\r\n//     driverInfo.style.color = `var(--color-${constructorId})`;\r\n//     const popup = document.createElement('div');\r\n//     popup.classList.add('popup-driver');\r\n//     popup.style.display = 'none';\r\n//     popup.style.borderColor = `var(--color-${constructorId})`;\r\n//     displayPopUp(place, popup);\r\n//     popup.innerHTML = `Grid-position ${grid}${\r\n//       grid == 1 ? 'st' : grid == 2 ? 'nd' : grid == 3 ? 'rd' : 'th'\r\n//     } <br> Laps ${laps} <br> Points ${points} <br> Time ${time}`;\r\n//     place.appendChild(image);\r\n//     place.appendChild(driverInfo);\r\n//     place.appendChild(popup);\r\n\r\n//     placeholder.appendChild(place);\r\n//   });\r\n// };\r\n\r\n// //Display Popup window for each driver in Top 3\r\n// const displayPopUp = function (place, popup) {\r\n//   place.onmouseover = function () {\r\n//     popup.style.display = '';\r\n//   };\r\n//   place.onmouseout = function () {\r\n//     popup.style.display = 'none';\r\n//   };\r\n// };\r\n// //helper functions\r\n// const goBack = function () {\r\n//   window.history.go(0);\r\n// };\r\n\r\n// const appendCircuits = function (data, values) {\r\n//   const x = document.querySelector('.section--3--window-table');\r\n//   for (let i = 0; i < data.length; i++) {\r\n//     const newRow = document.createElement('tr');\r\n\r\n//     const cell = document.createElement('td');\r\n\r\n//     const dataCell = document.createElement('td');\r\n//     cell.innerHTML = data[i];\r\n//     if (cell.innerHTML === 'Circuit Lenght') {\r\n//       dataCell.innerHTML = `${values[i]} km`;\r\n//     } else dataCell.innerHTML = values[i];\r\n//     newRow.appendChild(cell);\r\n//     newRow.appendChild(dataCell);\r\n//     newRow.classList.add('.row-table-circuits');\r\n//     x.appendChild(newRow);\r\n//   }\r\n// };\r\n\r\n// const getToSpecificSection = function () {\r\n//   const championship = document.getElementById('#section--3--btn');\r\n//   const constructors = document.getElementById('#section--2--btn');\r\n//   const standings = document.getElementById('#section--1--btn');\r\n//   championship.addEventListener('click', function () {\r\n//     document\r\n//       .querySelector('.section__section--3')\r\n//       .scrollIntoView({ behavior: 'smooth' });\r\n//   });\r\n//   constructors.addEventListener('click', function () {\r\n//     document\r\n//       .querySelector('.section__section--2')\r\n//       .scrollIntoView({ behavior: 'smooth' });\r\n//   });\r\n//   standings.addEventListener('click', function () {\r\n//     document\r\n//       .querySelector('.section__section--1')\r\n//       .scrollIntoView({ behavior: 'smooth' });\r\n//   });\r\n// };\r\n// getToSpecificSection();\r\n\r\n//SORT TABLE BY POINTS NUMBER\r\n//Sort elements in Standings TABLE\r\n\r\n// const resetSort = () => {\r\n//   if (sortedColumn) {\r\n//     sortedColumn.element.removeChild(sortedColumn.element.lastChild);\r\n//     sortedColumn = null;\r\n//   }\r\n// };\r\n\r\n// const sortTable = (element, sortColumn) => {\r\n//   console.log(sortColumn);\r\n//   if (!sortedColumn) {\r\n//     element.appendChild(document.createTextNode('↑'));\r\n//     sortedColumn = { name: sortColumn, type: 'asc', element };\r\n//   } else if (sortedColumn.name === sortColumn) {\r\n//     if (sortedColumn.type === 'asc') {\r\n//       sortedColumn.type = 'desc';\r\n//       element.removeChild(element.lastChild);\r\n//       element.appendChild(document.createTextNode('↓'));\r\n//     } else {\r\n//       sortedColumn.type = 'asc';\r\n//       element.removeChild(element.lastChild);\r\n//       element.appendChild(document.createTextNode('↑'));\r\n//     }\r\n//   } else {\r\n//     sortedColumn.element.removeChild(sortedColumn.element.lastChild);\r\n//     element.appendChild(document.createTextNode('↑'));\r\n//     sortedColumn = { name: sortColumn, type: 'asc', element };\r\n//   }\r\n// };\r\n"],"names":["$984238bfd57a24ff$export$c43995b1cf297173","constructorsId","base","teamChief","chassis","powerUnit","allSlides","allElements","parentElement","document","querySelector","curSlide","elements","addHandlerConstructors","handler","getElementById","addEventListener","console","log","style","display","scrollIntoView","render","data","newSlide","id","name","$8a418f4c2848ae4e$export$ca000e230c0caa3e","driversData","drivers","standings","constructorData","constructorsSlides","circuitData","resultsPerPage","$8a418f4c2848ae4e$export$968a7caa7dc9312f","async","driversFetch","fetch","standingsFetch","Promise","all","then","responses","map","response","json","datas","MRData","StandingsTable","StandingsLists","DriverStandings","DriverTable","Drivers","$8a418f4c2848ae4e$export$e15edbb638cd2f23","standing","teamName","Constructors","points","position","wins","driverId","permanentNumber","nationality","givenName","familyName","Driver","number","nation","family","team","$8a418f4c2848ae4e$export$1848e1a861ae4288","constructorFetch","ConstructorTable","$8a418f4c2848ae4e$export$cce914e79f4d5eeb","constructor","constructorId","index","find","element","err","error","message","$8a418f4c2848ae4e$export$4901d0de3611090d","circuitFetch","circuits","CircuitTable","Circuits","page","$8a418f4c2848ae4e$export$c29162cf3ca31bcf","totalPages","Math","ceil","length","numberOfPages","start","end","slice","$abc5998c55ed0a00$export$2e2bcd8739ae039","_parentElement","_driverParentElement","addHandlerStandings","clear","this","remove","createElement","appendChild","renderDriverPicture","src","data1","newRow","text","cell","append","html","_topLevelElement","addHandlerCircuits","_clear","classList","add","renderProgressBar","data5","$f6bcfa8dcee4c2da$export$2e2bcd8739ae039","renderNextCircuits","maxPages","state","setAttribute","getCircuitPage","width","renderPreviousCircuits","data2","renderFirstArrow","data3","data4","forEach","newElement","circuitId","window","open","writeln","circuitName","$e59237c46c570137$var$btnSlideRight","$e59237c46c570137$var$btnSlideLeft","$e59237c46c570137$var$arrowLeft","$e59237c46c570137$var$arrowRight","$e59237c46c570137$var$maxSlides","$e59237c46c570137$var$curSlide","$e59237c46c570137$var$controlStandings","$8a418f4c2848ae4e$exports","dataStandings","getStandingsData","sort","a","b","$e59237c46c570137$var$controlConstructors","dataConstructors","getConstructorsData","$06b211bf9d72e753$export$2e2bcd8739ae039","$e59237c46c570137$var$controlNextSlide","removeChild","$e59237c46c570137$var$controlPreviousSlide","$e59237c46c570137$var$controlCircuits","getCircuits","$478447c84a529191$export$2e2bcd8739ae039","$e59237c46c570137$var$controlCircuitAddEvents","onload","getConstructors"],"version":3,"file":"index.2fa1881e.js.map"}